---
import { cva, cx, type VariantProps } from "class-variance-authority";
import type { HTMLTag, Polymorphic } from "astro/types";

export const buttonVariants = cva(
  "text-center rounded-md text-sm font-medium ring-offset-surface transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      intent: {
        default: "bg-primary text-on-primary hover:bg-primary/90",
        destructive: "bg-error text-on-error hover:bg-error/90",
        affirmative:
          "dark:bg-emerald-300 dark:text-green-900 hover:dark:bg-emerald-300/90 bg-emerald-500 text-emerald-50 hover:bg-emerald-500/90",
        outline:
          "border border-outline-variant bg-surface hover:bg-surface-container-low hover:text-primary",
        secondary:
          "bg-surface-container-high text-on-surface hover:bg-surface-container-highest",
        ghost: "hover:bg-surface-container hover:text-on-surface",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
        none: "",
      },
      full: {
        true: "w-full",
      },
    },
    defaultVariants: {
      intent: "default",
      size: "default",
      full: false,
    },
  }
);

type ButtonVariants = VariantProps<typeof buttonVariants>;

type Props<Tag extends HTMLTag = HTMLTag> = Polymorphic<{
  as: Tag;
}> & {
  variant?: ButtonVariants["intent"];
  size?: ButtonVariants["size"];
  full?: ButtonVariants["full"];
};

const {
  variant: intent,
  size,
  full,
  as: Tag = "button",
  class: className,
  ...rest
} = Astro.props;
---

<Tag class={cx(buttonVariants({ intent, size, full }), className)} {...rest}>
  <slot />
</Tag>
