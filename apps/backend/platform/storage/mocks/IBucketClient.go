// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
)

// IBucketClient is an autogenerated mock type for the IBucketClient type
type IBucketClient struct {
	mock.Mock
}

// DeleteFolder provides a mock function with given fields: ctx, bucketName, objectKey
func (_m *IBucketClient) DeleteFolder(ctx context.Context, bucketName string, objectKey string) error {
	ret := _m.Called(ctx, bucketName, objectKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucketName, objectKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadFile provides a mock function with given fields: ctx, bucketName, objectKey
func (_m *IBucketClient) DownloadFile(ctx context.Context, bucketName string, objectKey string) ([]byte, error) {
	ret := _m.Called(ctx, bucketName, objectKey)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, bucketName, objectKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, bucketName, objectKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, objectKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObject provides a mock function with given fields: ctx, bucketName, objectKey, lifetimeSecs
func (_m *IBucketClient) GetObject(ctx context.Context, bucketName string, objectKey string, lifetimeSecs int64) (*v4.PresignedHTTPRequest, error) {
	ret := _m.Called(ctx, bucketName, objectKey, lifetimeSecs)

	var r0 *v4.PresignedHTTPRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) (*v4.PresignedHTTPRequest, error)); ok {
		return rf(ctx, bucketName, objectKey, lifetimeSecs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *v4.PresignedHTTPRequest); ok {
		r0 = rf(ctx, bucketName, objectKey, lifetimeSecs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v4.PresignedHTTPRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(ctx, bucketName, objectKey, lifetimeSecs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyExists provides a mock function with given fields: ctx, bucketName, objectKey
func (_m *IBucketClient) KeyExists(ctx context.Context, bucketName string, objectKey string) (bool, error) {
	ret := _m.Called(ctx, bucketName, objectKey)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, bucketName, objectKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, bucketName, objectKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, objectKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: ctx, bucketName, objectKey, contentType, lifetimeSecs
func (_m *IBucketClient) PutObject(ctx context.Context, bucketName string, objectKey string, contentType string, lifetimeSecs int64) (*v4.PresignedHTTPRequest, error) {
	ret := _m.Called(ctx, bucketName, objectKey, contentType, lifetimeSecs)

	var r0 *v4.PresignedHTTPRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) (*v4.PresignedHTTPRequest, error)); ok {
		return rf(ctx, bucketName, objectKey, contentType, lifetimeSecs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) *v4.PresignedHTTPRequest); ok {
		r0 = rf(ctx, bucketName, objectKey, contentType, lifetimeSecs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v4.PresignedHTTPRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int64) error); ok {
		r1 = rf(ctx, bucketName, objectKey, contentType, lifetimeSecs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: ctx, bucketName, objectKey, file, contentType
func (_m *IBucketClient) UploadFile(ctx context.Context, bucketName string, objectKey string, file []byte, contentType string) error {
	ret := _m.Called(ctx, bucketName, objectKey, file, contentType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, string) error); ok {
		r0 = rf(ctx, bucketName, objectKey, file, contentType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIBucketClient creates a new instance of IBucketClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBucketClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBucketClient {
	mock := &IBucketClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
