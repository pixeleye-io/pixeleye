name: Pixeleye CI

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]

jobs:
  paths-filter:
    name: Paths filter
    runs-on: ubuntu-latest
    outputs:
      migrations: ${{ steps.filter.outputs.migrations }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            migrations:
              - 'apps/backend/platform/migrations'
  node-ci:
    name: Node - Build, Lint, Test, Types
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 16]
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      DOCS_TOKEN: ${{ secrets.DOCS_TOKEN }}

    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install

      - name: Lint
        run: pnpm turbo lint

      - name: Test
        run: pnpm turbo test

      - name: Types
        run: pnpm turbo types

      - name: Build
        run: pnpm turbo deploy

  golang-ci:
    name: Golang - Lint, Test, Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.20"
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.53
          args: --timeout=5m
          working-directory: ./apps/backend

      - name: Install dependencies
        run: |
          cd apps/backend  
          go mod download
          go mod verify

      - name: Build
        run: |
          cd apps/backend
          go build -v ./...

      - name: Test
        run: |
          cd apps/backend
          go test -v ./...

  atlas-lint:
    name: Atlas - Linting
    runs-on: ubuntu-latest
    needs: paths-filter
    if: github.ref == 'refs/heads/main' || needs.paths-filter.outputs.migrations == 'true'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: test
        ports:
          - 5430:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: ariga/atlas-action@v0
        with:
          dir: apps/backend/platform/migrations
          dir-format: atlas
          dev-url: postgres://postgres:pass@127.0.0.1:5430/test?sslmode=disable
          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}

  atlas-sync:
    needs: atlas-lint
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ariga/atlas-sync-action@v0
        with:
          dir: 'apps/backend/platform/migrations'
          dir-format: 'atlas'
          driver: postgres
          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [golang-ci, node-ci]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      rabbitmq:
        image: rabbitmq:3-alpine
        env:
          RABBITMQ_DEFAULT_USER: rabbitmq
          RABBITMQ_DEFAULT_PASS: rabbitmq
        ports:
          - 5672:5672
          - 15672:15672
        options: --health-cmd "rabbitmq-diagnostics -q check_running" --health-interval 10s --health-timeout 5s --health-retries 5
      minio:
        image: minio/minio
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: minio123
        options: --health-cmd "curl http://localhost:9000/minio/health/live" -q check_running" --health-interval 10s --health-timeout 5s --health-retries 5


    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Install Atlas
        run: |
          curl -sSf https://atlasgo.sh | sh
          atlas migrate apply --dir file://apps/backend/platform/migrations/ -u 'postgres://postgres:pass@127.0.0.1:5432/test?sslmode=disable'

      - name: Setup golang
        uses: actions/setup-go@v4
        with:
          go-version: "^1.20"

      - name: Install go dependencies
        working-directory: ./apps/backend
        run: |
          go mod download
          go mod verify

      - name: Create .env file
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_ORY_ENDPOINT: ${{ secrets.ORY_ENDPOINT }}
          envkey_ORY_API_KEY: ${{ secrets.ORY_API_KEY }}
          envkey_SERVER_ENDPOINT: http://127.0.0.1:5000
          envkey_SERVER_URL: 127.0.0.1:5000
          envkey_DB_URL: postgres://postgres:pass@127.0.0.1:5432/test?sslmode=disable
          envkey_DB_MAX_CONNECTIONS: 100
          envkey_DB_MAX_IDLE_CONNECTIONS: 10
          envkey_DB_MAX_LIFETIME_CONNECTIONS: 2
          envkey_AMQP_URL: amqp://rabbitmq:rabbitmq@127.0.0.1:5672
          envkey_S3_BUCKET: pixeleye
          envkey_S3_ENDPOINT: http://127.0.0.1:9000
          envkey_S3_KEY_SECRET: minio123
          envkey_S3_ACCESS_KEY_ID: minio
          

      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies node
        run: pnpm install

      - name: Run api tests
        working-directory: ./apps/backend
        run: go run main.go & pnpm turbo test:api
