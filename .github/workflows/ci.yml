name: Pixeleye CI

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]

jobs:
  paths-filter:
    name: Paths filter
    runs-on: ubuntu-latest
    outputs:
      migrations: ${{ steps.filter.outputs.migrations }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            migrations:
              - 'apps/backend/platform/migrations/**'
            backend:
              - 'apps/backend/**'
  node-ci:
    name: Node - Build, Lint, Test, Types
    timeout-minutes: 15
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
      DOCS_TOKEN: ${{ secrets.DOCS_TOKEN }}
      GITHUB_APP_NAME: "pixeleye-io"
      NEXT_PUBLIC_SERVER_URL: "http://localhost:5000"
      NEXT_PUBLIC_SERVER_ENDPOINT: "http://localhost:3000"

    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright Browsers
        working-directory: ./libs/booth
        run: pnpx playwright install --with-deps

      - name: Lint
        run: pnpm turbo lint

      - name: Test
        run: pnpm turbo test

      - name: Types
        run: pnpm turbo types

      - name: Build
        run: pnpm turbo deploy

  golang-ci:
    name: Golang - Lint, Test, Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
          args: --timeout=5m
          working-directory: ./apps/backend

      - name: Install dependencies
        run: |
          cd apps/backend  
          go mod download
          go mod verify

      - name: Build
        run: |
          cd apps/backend
          go build -v ./...

      - name: Test
        run: |
          cd apps/backend
          go test -v ./...

  atlas-lint:
    name: Atlas - Linting
    runs-on: ubuntu-latest
    needs: paths-filter
    if: github.ref == 'refs/heads/main' || needs.paths-filter.outputs.migrations == 'true'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: test
        ports:
          - 5430:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: ariga/atlas-action@v0
        with:
          dir: apps/backend/platform/migrations
          dir-format: atlas
          dev-url: postgres://postgres:pass@127.0.0.1:5430/test?sslmode=disable
          cloud-token: ${{ secrets.ATLAS_CLOUD_TOKEN }}

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [golang-ci, node-ci]

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      rabbitmq:
        image: rabbitmq:3-alpine
        env:
          RABBITMQ_DEFAULT_USER: rabbitmq
          RABBITMQ_DEFAULT_PASS: rabbitmq
        ports:
          - 5672:5672
          - 15672:15672
        options: --health-cmd "rabbitmq-diagnostics -q check_running" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Install Atlas
        run: |
          curl -sSf https://atlasgo.sh | sh
          atlas migrate apply --dir file://apps/backend/platform/migrations/ -u 'postgres://postgres:pass@127.0.0.1:5432/test?sslmode=disable'

      - name: Setup golang
        uses: actions/setup-go@v4
        with:
          go-version: "^1.21"

      - name: Install go dependencies
        working-directory: ./apps/backend
        run: |
          go mod download
          go mod verify

      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: Install dependencies node
        run: pnpm install

      - name: Run api tests
        working-directory: ./apps/backend
        env:
          BACKEND_URL: http://127.0.0.1:5000
          FRONTEND_URL: http://127.0.0.1:3000

          AMQP_USER: rabbitmq
          AMQP_PASSWORD: rabbitmq
          AMPQ_HOST: 127.0.0.1
          AMQP_PORT: 5672

          DB_USERNAME: postgres
          DB_PASSWORD: pass
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_NAME: test
          DB_SSL_MODE: disable

          S3_BUCKET: pixeleye-ci
          S3_ENDPOINT: ${{ vars.S3_ENDPOINT }}
          S3_KEY_SECRET: ${{ secrets.S3_KEY_SECRET }}
          S3_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}

          ORY_URL: ${{ secrets.ORY_ENDPOINT }}
          ORY_ADMIN_URL: ${{ secrets.ORY_ENDPOINT }}
          ORY_API_KEY: ${{ secrets.ORY_API_KEY }}

        run: go run main.go & pnpm turbo test:api

  deploy-private-migration-image:
    name: Deploy database migrations
    runs-on: ubuntu-latest
    needs: [api-tests, atlas-lint, paths-filter]
    if: github.ref == 'refs/heads/main' && ${{ needs.changes.outputs.migrations == 'true' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: pixeleye/pixeleye-migrations-private
          tags: |
            latest
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/backend
          file: apps/backend/Dockerfile.migrations
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy-private-api-image:
    name: Deploy api image
    runs-on: ubuntu-latest
    needs: [api-tests, atlas-lint, paths-filter]
    if: github.ref == 'refs/heads/main' && ${{ needs.changes.outputs.backend == 'true' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: pixeleye/pixeleye-api-private
          tags: |
            latest
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/backend
          platforms: linux/amd64,linux/arm64
          file: apps/backend/Dockerfile.api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy-private-ingest-image:
    name: Deploy ingest image
    runs-on: ubuntu-latest
    needs: [api-tests, atlas-lint, paths-filter]
    if: github.ref == 'refs/heads/main' && ${{ needs.changes.outputs.backend == 'true' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: pixeleye/pixeleye-ingest-private
          tags: |
            latest
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/backend
          file: apps/backend/Dockerfile.ingest
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
